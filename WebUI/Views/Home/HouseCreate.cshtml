<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>Менеджер домов</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="~/css/table.css" />
</head>
<body>
    <div class="wrapper">
        <div class="content">
            <div class="main">
                <div class="container">
                    <div class="main__raw">
                        <div class="main__column main__form">
                            <h2>Создание дома</h2>
                            <div id="liveAlertPlaceholder"></div>
                            <form name="houseForm" class="form-group needs-validation" novalidate>
                                <input type="hidden" name="id" value="0" />
                                <div class="form-group">
                                    <label for="1">Область:</label>
                                    <select required class="form-control" name="area" id="1">
                                        <option value="" selected disabled hidden>Выбрать область</option>
                                    </select>
                                    <div class="invalid-feedback">Выберите область.</div>
                                </div>
                                <div class="form-group">
                                    <label for="2">Район:</label>
                                    <select required class="form-control" name="district" id="2">
                                        <option value="" selected disabled hidden>Выбрать район</option>
                                    </select>
                                    <div class="invalid-feedback">Выберите район.</div>
                                </div>
                                <div class="form-group">
                                    <label for="3">Город:</label>
                                    <select required class="form-control" name="city" id="3">
                                        <option value="" selected disabled hidden>Выбрать город</option>
                                    </select>
                                    <div class="invalid-feedback">Выберите город.</div>
                                </div>
                                <div class="form-group">
                                    <label for="4">Улица:</label>
                                    <select required class="form-control" name="street" id="4">
                                        <option value="" selected disabled hidden>Выбрать улицу</option>
                                    </select>
                                    <div class="invalid-feedback">Выберите улицу.</div>
                                </div>
                                <div class="form-group">
                                    <label for="name_input">Номер/название дома:</label>
                                    <input id="name_input" required class="form-control" name="name" />
                                    <div class="invalid-feedback">Некорректные данные.</div>
                                </div>
                                <div class="form-group">
                                    <label for="info">Информация:</label>
                                    <input class="form-control" name="info" />
                                </div>

                                <div class="panel-body">
                                    <button type="submit" id="submit" class="btn btn-primary">Сохранить</button>
                                    <button type="reset" id="reset_btn" class="btn btn-primary">Сбросить</button>
                                </div>
                            </form>

                        </div>
                        <div class="main__table main__column">
                            <div class="table-responsive table-fixed">
                                <table id="data_table" class="table table-condensed table-striped">
                                    <thead><tr><th>Id</th><th>Название</th><th></th></tr></thead>
                                    <tbody id="tbody_data_table">
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

     <script>
        // Получение всех областей
        async function GetAreas() {
            // отправляет запрос и получаем ответ
            const response = await fetch("/api/area", {
                method: "GET",
                headers: { "Accept": "application/json" }
            });
            // если запрос прошел нормально
            if (response.ok === true) {
                // получаем данные
                const areas = await response.json();
                var selectArea = document.getElementById("1");

                areas.forEach(area => {
                    var option = document.createElement("option");
                    option.text = area.areaName;
                    option.value = area.id;
                    selectArea.add(option);
                });
            }
        }

        // Получение районов области
        async function GetDistrictByAreaId(id) {
            const response = await fetch("/api/district/AreaId/" + id, {
                method: "GET",
                headers: { "Accept": "application/json" }
            });
            if (response.ok === true) {
                const districts = await response.json();
                var selectDistrict = document.getElementById("2");

                districts.forEach(district => {
                    var option = document.createElement("option");
                    option.text = district.districtName;
                    option.value = district.id;
                    selectDistrict.add(option);
                });
            }
        }

        // Получение городов по району
        async function GetCitiesByDistrictId(id) {
            const response = await fetch("/api/city/DistrictId/" + id, {
                method: "GET",
                headers: { "Accept": "application/json" }
            });
            if (response.ok === true) {
                const cities = await response.json();
                var selectCity = document.getElementById("3");

                cities.forEach(city => {
                    var option = document.createElement("option");
                    option.text = city.cityType + " " + city.cityName + " (" + city.cityCategory + ")";
                    option.value = city.id;
                    selectCity.add(option);
                });
            }
        }

        async function GetStreetsByCityId(id) {
            const response = await fetch("/api/street/CityId/" + id, {
                method: "GET",
                headers: { "Accept": "application/json" }
            });
            if (response.ok === true) {
                const streets = await response.json();
                var selectStreet = document.getElementById("4");

                streets.forEach(street => {
                    var option = document.createElement("option");
                    option.text = street.streetType + " " + street.streetName;
                    option.value = street.id;
                    selectStreet.add(option);
                });
            }
        }

        async function GetHousesByStreetId(id) {
            const response = await fetch("/api/house/StreetId/" + id, {
                method: "GET",
                headers: { "Accept": "application/json" }
            });
            if (response.ok === true) {
                const houses = await response.json();
                let rows = document.querySelector("tbody");
                houses.forEach(house => {
                    // добавляем полученные элементы в таблицу
                    rows.append(row(house));
                });
            }
        }

        // Получение одного дома
        async function GetHouse(id) {
            const response = await fetch("/api/house/" + id, {
                method: "GET",
                headers: { "Accept": "application/json" }
            });
            if (response.ok === true) {
                const house = await response.json();

                const form = document.forms["houseForm"];

                form.elements["id"].value = house.id;
                form.elements["name"].value = house.houseNumber;
                form.elements["info"].value = house.information;
            }
        }

        // Добавление
        async function CreateHouse(street_id, name, info) {
            const response = await fetch("/api/house", {
                method: "POST",
                headers: { "Accept": "application/json", "Content-Type": "application/json" },
                body: JSON.stringify({
                    houseNumber: name,
                    information: info,
                    streetId: parseInt(street_id, 10)
                })
            });

            if (response.ok === true) {
                const house = await response.json();
                reset();
                clear_alert("alert_id");
                add_alert("Дом успешно добавлен!", "success", "alert_id");
                document.querySelector("tbody").append(row(house));
            }
            else {
                clear_alert("alert_id");
                add_alert("Произошла ошибка! Код: " + response.status + ". Обратитесь к специалисту.", "danger", "alert_id");
            }
        }
        // Изменение
        async function EditHouse(house_id, street_id, name, info) {
            const response = await fetch("/api/house", {
                method: "PUT",
                headers: { "Accept": "application/json", "Content-Type": "application/json" },
                body: JSON.stringify({
                    id: parseInt(house_id, 10),
                    houseNumber: name,
                    information: info,
                    streetId: parseInt(street_id, 10)
                })
            });
            if (response.ok === true) {
                const house = await response.json();
                reset();
                clear_alert("alert_id");
                add_alert("Дом успешно изменён!", "success", "alert_id");
                document.querySelector("tr[data-rowid='" + house.id + "']").replaceWith(row(house));
            }
            else {
                clear_alert("alert_id");
                add_alert("Произошла ошибка! Код: " + response.status + ". Обратитесь к специалисту.", "danger", "alert_id");
            }
        }

        // Удаление
        async function DeleteHouse(id) {
            const response = await fetch("/api/house/" + id, {
                method: "DELETE",
                headers: { "Accept": "application/json" }
            });
            if (response.ok === true) {
                clear_alert("alert_id");
                add_alert("Удаление прошло успешно!", "success", "alert_id");
                document.querySelector("tr[data-rowid='" + id + "']").remove();
            }
            else {
                clear_alert("alert_id");
                add_alert("Произошла ошибка! Код: " + response.status + ". Обратитесь к специалисту.", "danger", "alert_id");
            }
        }

        // создание строки для таблицы
        function row(house) {

            const tr = document.createElement("tr");
            tr.setAttribute("data-rowid", house.id);

            const idTd = document.createElement("td");
            idTd.append(house.id);
            tr.append(idTd);

            const nameTd = document.createElement("td");
            nameTd.append(house.houseNumber);
            tr.append(nameTd);

            const linksTd = document.createElement("td");

            const editLink = document.createElement("a");
            editLink.setAttribute("data-id", house.id);
            editLink.setAttribute("style", "cursor:pointer;padding:15px;");
            editLink.append("Изменить");
            editLink.addEventListener("click", e => {

                e.preventDefault();
                GetHouse(house.id);
            });
            linksTd.append(editLink);

            const removeLink = document.createElement("a");
            removeLink.setAttribute("data-id", house.id);
            removeLink.setAttribute("style", "cursor:pointer;padding:15px;");
            removeLink.append("Удалить");
            removeLink.addEventListener("click", e => {

                e.preventDefault();
                DeleteHouse(house.id);
            });

            linksTd.append(removeLink);
            tr.appendChild(linksTd);

            return tr;
        }

        // сброс формы
        function reset() {
            const form = document.forms["houseForm"];
            form.reset();
            form.classList.remove('was-validated');
            form.elements["id"].value = 0;
            form.elements["name"].value = "";
            form.elements["info"].value = "";
            //clearSelect(document.getElementById("1"));
            clearSelect(document.getElementById("2"));
            clearSelect(document.getElementById("3"));
            clearSelect(document.getElementById("4"));
        }

        // сброс значений формы
        document.forms["houseForm"].addEventListener("reset", e => {
            e.preventDefault();
            reset();
        })

        var alertPlaceholder = document.getElementById('liveAlertPlaceholder');

        function add_alert(message, type, id) {
            var wrapper = document.createElement('div')
            wrapper.innerHTML = '<div id="' + id + '" class="alert alert-' + type + ' alert-dismissible" role="alert">' + message +
                '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>'

            alertPlaceholder.append(wrapper)
        }

        function clear_alert(id) {
            var alertNode = document.getElementById(id);

            if (alertNode) {
                var alert = new bootstrap.Alert(alertNode);
                alert.close();
            }
        }

        // отправка формы
        document.forms["houseForm"].addEventListener("submit", e => {
            e.preventDefault();

            const form = document.forms["houseForm"];

            form.classList.add('was-validated');

            if (form.checkValidity() !== false) {
                const id = form.elements["id"].value;
                const street_id = form.elements["street"].value;
                const name = form.elements["name"].value;
                const info = form.elements["info"].value;

                if (id == 0)
                    CreateHouse(street_id, name, info);
                else
                    EditHouse(id, street_id, name, info);
            }            
        });

        //очистка таблицы
        function clearTable() {
            const table = document.getElementById("data_table");

            const new_tbody = document.createElement('tbody');
            new_tbody.setAttribute('id', "tbody_data_table");

            const old_tbody = document.getElementById("tbody_data_table");

            table.replaceChild(new_tbody, old_tbody);
        }

        function clearSelect(selectElement) {
            var i, L = selectElement.options.length - 1;
            for (i = L; i >= 0; i--) {
                //if (selectElement.value == "none") continue;
                selectElement.remove(i);
            }
        }
        // загрузка областей
        GetAreas();

        // обновление районов после выбора области
        document.getElementById("1").addEventListener('change', (event) => {
            clearSelect(document.getElementById("2"));
            GetDistrictByAreaId(event.target.value);
        })

        // обновление городов после выбора района
        document.getElementById("2").addEventListener('change', (event) => {
            clearSelect(document.getElementById("3"));
            GetCitiesByDistrictId(event.target.value);
        })

        // обновление улиц
        document.getElementById("3").addEventListener('change', (event) => {
            clearSelect(document.getElementById("4"));
            GetStreetsByCityId(event.target.value);
        })

        // обновление таблицы
        document.getElementById("4").addEventListener('change', (event) => {
            clearTable();
            GetHousesByStreetId(event.target.value);
        })

    </script>
</body>
</html>