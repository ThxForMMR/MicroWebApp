<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>Менеджер областей</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="~/css/table.css" />    
</head>
<body>
    <div class="wrapper">
        <div class="content">
            <div class="main">
                <div class="container">
                    <div class="main__raw">
                        <div class="main__column main__form">
                            <h2>Создание области</h2>
                            <div id="liveAlertPlaceholder"></div>
                            <div class="my-custom-form">
                                <form name="areaForm" class="form-group needs-validation" novalidate>
                                    <input type="hidden" name="id" value="0" />
                                    <div class="form-group">
                                        <label for="name_input">Название:</label>
                                        <input id="name_input" required class="form-control" name="name" />
                                        <div class="invalid-feedback">Некорректное название.</div>
                                    </div>
                                    <div class="panel-body">
                                        <button type="submit" id="submit" class="btn btn-primary">Сохранить</button>
                                        <button type="reset" id="reset_btn" class="btn btn-primary">Сбросить</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                        <div class="main__table main__column">
                            <div class="table-responsive table-fixed">
                                <table class="table table-condensed table-striped">
                                    <thead><tr><th>Id</th><th>Название</th><th></th></tr></thead>
                                    <tbody>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Получение всех
        async function GetAreas() {
            // отправляет запрос и получаем ответ
            const response = await fetch("/api/area", {
                method: "GET",
                headers: { "Accept": "application/json" }
            });
            // если запрос прошел нормально
            if (response.ok === true) {
                // получаем данные
                const areas = await response.json();
                let rows = document.querySelector("tbody");
                areas.forEach(area => {
                    // добавляем полученные элементы в таблицу
                    rows.append(row(area));
                });
            }
        }
        // Получение одного
        async function GetArea(id) {
            const response = await fetch("/api/area/" + id, {
                method: "GET",
                headers: { "Accept": "application/json" }
            });
            if (response.ok === true) {
                const area = await response.json();
                const form = document.forms["areaForm"];
                form.elements["id"].value = area.id;
                form.elements["name"].value = area.areaName;
            }
        }
        // Добавление
        async function CreateArea(Name) {
            const response = await fetch("/api/area", {
                method: "POST",
                headers: { "Accept": "application/json", "Content-Type": "application/json" },
                body: JSON.stringify({
                    areaName: Name
                })
            });
            if (response.ok === true) {
                const area = await response.json();
                reset();
                clear_alert("alert_id");
                add_alert("Область успешно добавлена!", "success", "alert_id");
                document.querySelector("tbody").append(row(area));
            }
            else {
                clear_alert("alert_id");
                add_alert("Произошла ошибка! Код: " + response.status + ". Обратитесь к специалисту.", "danger", "alert_id");
            }
        }
        // Изменение
        async function EditArea(areaId, Name) {
            const response = await fetch("/api/area", {
                method: "PUT",
                headers: { "Accept": "application/json", "Content-Type": "application/json" },
                body: JSON.stringify({
                    id: parseInt(areaId, 10),
                    areaName: Name
                })
            });
            if (response.ok === true) {
                const area = await response.json();
                reset();
                clear_alert("alert_id");
                add_alert("Область успешно обновлена!", "success", "alert_id");
                document.querySelector("tr[data-rowid='" + area.id + "']").replaceWith(row(area));
            }
            else {
                clear_alert("alert_id");
                add_alert("Произошла ошибка! Код: " + response.status + ". Обратитесь к специалисту.", "danger", "alert_id");
            }
        }
        // Удаление
        async function DeleteArea(id) {
            const response = await fetch("/api/area/" + id, {
                method: "DELETE",
                headers: { "Accept": "application/json" }
            });
            if (response.ok === true) {
                clear_alert("alert_id");
                add_alert("Удаление прошло успешно!", "success", "alert_id");
                document.querySelector("tr[data-rowid='" + id + "']").remove();
            }
            else {
                clear_alert("alert_id");
                add_alert("Произошла ошибка! Код: " + response.status + ". Обратитесь к специалисту.", "danger", "alert_id");
            }
        }

        // сброс формы
        function reset() {
            const form = document.forms["areaForm"];
            form.reset();
            form.classList.remove('was-validated');
            form.elements["id"].value = 0;
            form.elements["name"].value = "";
        }
        // создание строки для таблицы
        function row(area) {

            const tr = document.createElement("tr");
            tr.setAttribute("data-rowid", area.id);

            const idTd = document.createElement("td");
            idTd.append(area.id);
            tr.append(idTd);

            const nameTd = document.createElement("td");
            nameTd.append(area.areaName);
            tr.append(nameTd);

            const linksTd = document.createElement("td");

            const editLink = document.createElement("a");
            editLink.setAttribute("data-id", area.id);
            editLink.setAttribute("style", "cursor:pointer;padding:15px;");
            editLink.append("Изменить");
            editLink.addEventListener("click", e => {

                e.preventDefault();
                GetArea(area.id);
            });
            linksTd.append(editLink);

            const removeLink = document.createElement("a");
            removeLink.setAttribute("data-id", area.id);
            removeLink.setAttribute("style", "cursor:pointer;padding:15px;");
            removeLink.append("Удалить");
            removeLink.addEventListener("click", e => {

                e.preventDefault();
                DeleteArea(area.id);
            });

            linksTd.append(removeLink);
            tr.appendChild(linksTd);

            return tr;
        }

        // сброс значений формы
        document.forms["areaForm"].addEventListener("reset_btn", e => {
            e.preventDefault();
            reset();
        })

        var alertPlaceholder = document.getElementById('liveAlertPlaceholder');

        function add_alert(message, type, id) {
            var wrapper = document.createElement('div')
            wrapper.innerHTML = '<div id="' + id + '" class="alert alert-' + type + ' alert-dismissible" role="alert">' + message +
                '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>'

            alertPlaceholder.append(wrapper)
        }

        function clear_alert(id) {
            var alertNode = document.getElementById(id);
            //var alertNode = document.querySelector('.alert')

            if (alertNode) {
                var alert = new bootstrap.Alert(alertNode);
                alert.close();
            }

        }

        // отправка формы
        document.forms["areaForm"].addEventListener("submit", e => {
            e.preventDefault();

            const form = document.forms["areaForm"];
            form.classList.add('was-validated');

            if (form.checkValidity() !== false) {
                const id = form.elements["id"].value;
                const name = form.elements["name"].value;

                if (id == 0)
                    CreateArea(name);
                else
                    EditArea(id, name);
            }
        });

        // загрузка пользователей
        GetAreas();

    </script>
</body>
</html>